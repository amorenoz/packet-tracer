use std::time::Instant;

use anyhow::Result;

use crate::{core::events::bpf::parse_raw_event, module::get_modules};

/// Benchmark time to parse a bunch of raw events.
pub(super) fn bench(ci: bool) -> Result<()> {
    let iters = match ci {
        false => 1000000,
        true => 1,
    };

    let modules = get_modules()?;
    let mut factories = modules.section_factories()?;

    // 620900618594 (0) [retis] 23486/23566 [tp] openvswitch:ovs_do_execute_action #90908f5967ffff940e42884800 (skb ffff940e445f8700)
    //   ns 4026531840 if 10 (ovs-br0) rxif 2 6e:60:9e:6f:f9:49 > ce:ef:0f:f6:ba:06 ethertype IPv4 (0x0800) 1.0.0.1.443 > 10.0.42.2.35712 ttl 55 tos 0x0 id 23561 off 0 [DF] len 1500 proto TCP (6) flags [.] seq 1807307162:1807308610 ack 1084401741 win 8 skb [csum unnecessary (level 0) hash 0x9c1f35b9 len 1514 data_len 1448 priority 0 users 1 dataref 1]
    //   exec oport 3
    //   ct_state REPLY tcp (ESTABLISHED) orig [10.0.42.2.35712 > 1.0.0.1.443] reply [1.0.0.1.443 > 172.16.42.90.35712] zone 0
    let data = [
        56, 2, 1, 0, 12, 0, 104, 151, 143, 144, 144, 0, 0, 0, 0, 0, 0, 0, 1, 1, 72, 0, 14, 92, 0,
        0, 190, 91, 0, 0, 114, 101, 116, 105, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 32, 81, 162, 192, 255, 255, 255, 255,
        2, 255, 255, 255, 255, 255, 255, 255, 255, 7, 1, 8, 1, 234, 5, 0, 0, 66, 0, 0, 0, 206, 239,
        15, 246, 186, 6, 110, 96, 158, 111, 249, 73, 8, 0, 69, 0, 5, 220, 92, 9, 64, 0, 55, 6, 173,
        16, 1, 0, 0, 1, 10, 0, 42, 2, 1, 187, 139, 128, 107, 185, 81, 154, 64, 162, 168, 77, 128,
        16, 0, 8, 8, 167, 0, 0, 1, 1, 8, 10, 32, 151, 207, 119, 195, 151, 20, 154, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 7, 2, 24, 0, 118, 101, 116, 104, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11,
        0, 0, 0, 2, 0, 0, 0, 7, 3, 4, 0, 0, 0, 0, 240, 7, 4, 22, 0, 234, 5, 0, 0, 168, 5, 0, 0,
        185, 53, 31, 156, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 5, 0, 0, 0, 0, 1, 1, 5, 1, 24, 0, 0,
        72, 136, 66, 14, 148, 255, 255, 103, 89, 143, 144, 144, 0, 0, 0, 0, 135, 95, 68, 14, 148,
        255, 255, 10, 1, 79, 0, 23, 0, 0, 0, 0, 0, 10, 0, 42, 2, 0, 4, 0, 64, 199, 3, 0, 0, 0, 4,
        0, 64, 139, 128, 1, 0, 0, 1, 1, 0, 12, 0, 157, 12, 156, 129, 144, 0, 0, 0, 1, 187, 1, 0, 0,
        1, 72, 0, 27, 11, 0, 0, 27, 11, 0, 0, 115, 115, 1, 187, 172, 16, 42, 90, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 139, 128, 3, 10, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 17, 0, 112, 23, 237,
        182, 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 64, 199, 3, 0, 0,
    ];

    // Parse one first as some factories have on-demand
    // initialization steps.
    let now = Instant::now();
    parse_raw_event(&data, &mut factories)?;
    println!("first_raw_event_parsing_us {}", now.elapsed().as_micros());

    let now = Instant::now();
    for _ in 0..iters {
        parse_raw_event(&data, &mut factories)?;
    }
    println!("1M_raw_events_parsing_us {}", now.elapsed().as_micros());

    Ok(())
}
